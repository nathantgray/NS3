name: "CI"

on: [push]
  #schedule:
#  - cron:  '0 5 * * *'  #daily build at 5AM
jobs:

  Ubuntu:

    runs-on: ubuntu-latest

    outputs:
      cache_hit_rate: ${{ steps.ccache_results.outputs.ccache_hit_rate }}
    steps:
      - uses: actions/checkout@v1
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get -y install apt-utils
          sudo apt-get -y install git gcc g++ cmake python make ninja-build
          #sudo apt-get -y install qt5-default
          #sudo apt-get -y install gdb valgrind
          sudo apt-get -y install tcpdump libgsl-dev mpi-default-dev libxml2-dev
          sudo apt-get -y install curl unzip tar
          sudo apt-get -y install ccache
      - name: Get timestamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD-HH-mm-ss'
      - name: Restore ccache
        id: ccache
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ubuntu-ci-${{steps.time.outputs.time}}
          restore-keys: ubuntu-ci-
      - name: Setup ccache
        run: |
          ccache --set-config=cache_dir="$GITHUB_WORKSPACE/.ccache"
          ccache --set-config=max_size=400M
          ccache --set-config=compression=true
          ccache -z
      - name: Configure CMake
        run: |
          mkdir cmake-cache
          cd cmake-cache
          cmake -DCMAKE_BUILD_TYPE=minsizerel -DNS3_EXAMPLES=ON -DNS3_TESTS=ON -G"Ninja"  ..
      - name: Build ns-3
        run: |
          cd cmake-cache
          ninja
      - name: Print ccache statistics
        id: ccache_results
        run: |
          ccache -s
          python3 -c "import re; print('::set-output name=cache_hit_rate::'+re.findall('.* (.*) %', '`ccache -s | grep "cache hit rate"`')[0])"
      - name: Run tests and examples
        if: steps.ccache_results.outputs.cache_hit_rate != '100.00'    
        run: python3 test.py --nowaf

  Ubuntu-coverage:
    runs-on: ubuntu-latest
    outputs:
      cache_hit_rate: ${{ steps.ccache_results.outputs.ccache_hit_rate }}
    steps:
      - uses: actions/checkout@v1
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get -y install apt-utils
          sudo apt-get -y install git gcc g++ cmake python3 make ninja-build
          #sudo apt-get -y install qt5-default
          #sudo apt-get -y install gdb valgrind
          sudo apt-get -y install tcpdump libgsl-dev mpi-default-dev libxml2-dev
          sudo apt-get -y install curl unzip tar
          sudo apt-get -y install ccache
          sudo apt-get -y install lcov
      - name: Get timestamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD-HH-mm-ss'
      - name: Restore ccache
        id: ccache
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ubuntu-coverage-${{steps.time.outputs.time}}
          restore-keys: ubuntu-coverage-
      - name: Setup ccache
        run: |
          ccache --set-config=cache_dir="$GITHUB_WORKSPACE/.ccache"
          ccache --set-config=max_size=400M
          ccache --set-config=compression=true
          ccache -z
      - name: Configure CMake
        run: |
          mkdir cmake-cache
          cd cmake-cache
          cmake -DCMAKE_BUILD_TYPE=relwithdebinfo -DNS3_EXAMPLES=ON -DNS3_TESTS=ON -DNS3_COVERAGE=ON -G"Ninja"  ..
      - name: Build ns-3
        run: |
          cd cmake-cache
          ninja
      - name: Print ccache statistics
        id: ccache_results
        run: |
          ccache -s
          python3 -c "import re; print('::set-output name=cache_hit_rate::'+re.findall('.* (.*) %', '`ccache -s | grep "cache hit rate"`')[0])"
      - name: Generate coverage data and submit to codecov.io
        if: steps.ccache_results.outputs.cache_hit_rate != '100.00'
        run: |
          cd cmake-cache
          ninja coverage_gcc
          cd ../build/coverage
          bash <(curl -s https://codecov.io/bash) -f ns3.info || echo "Codecov did not collect coverage reports"

  Windows_MinGW:

    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    outputs:
        cache_hit_rate: ${{ steps.ccache_results.outputs.ccache_hit_rate }}
    steps:
      - uses: actions/checkout@v1
      # Manual setup
      #- name: Install msys2/mingw64
      #  #steps from https://github.com/msys2/MINGW-packages/blob/master/azure-pipelines.yml
      #  run: |
      #    git clone https://github.com/msys2/msys2-ci-base.git D:\msys64 # they removed this repo :(
      #    D:\msys64\usr\bin\rm -rf D:\msys64\.git
      #    set PATH=D:\msys64\usr\bin;%WINDIR%;%WINDIR%\System32
      #    D:\msys64\usr\bin\pacman --noconfirm -Syyuu
      #    set PATH=D:\msys64\usr\bin;%WINDIR%;%WINDIR%\System32
      #    D:\msys64\usr\bin\pacman --noconfirm --needed -S git base-devel
      #    D:\msys64\usr\bin\pacman --noconfirm -Scc
      #  shell: cmd
      - uses: msys2/setup-msys2@v2
      - name: Install required msys2/mingw64 packages
        run: |
          pacman -S --noconfirm unzip
          pacman -S --noconfirm tar
          pacman -S --noconfirm mingw-w64-x86_64-curl
          pacman -S --noconfirm mingw-w64-x86_64-binutils
          pacman -S --noconfirm mingw-w64-x86_64-cmake
          pacman -S --noconfirm mingw-w64-x86_64-gcc
          pacman -S --noconfirm mingw-w64-x86_64-ninja
          pacman -S --noconfirm mingw-w64-x86_64-python
          pacman -S --noconfirm mingw-w64-x86_64-ccache
          pacman -S --noconfirm mingw-w64-x86_64-gsl
          pacman -S --noconfirm mingw-w64-x86_64-libxml2
          pacman --noconfirm -Scc
      - name: Get timestamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD-HH-mm-ss'
      - name: Restore ccache
        id: ccache
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: msys2-${{steps.time.outputs.time}}
          restore-keys: msys2-
      - name: Setup ccache
        run: |
          ccache --set-config=cache_dir="$GITHUB_WORKSPACE/.ccache"
          ccache --set-config=max_size=400M
          ccache --set-config=compression=true
          ccache -z
      - name: Configure CMake
        run: |
          mkdir cmake-cache
          cd cmake-cache
          cmake -DCMAKE_BUILD_TYPE=minsizerel -DNS3_EXAMPLES=ON -DNS3_TESTS=ON -G"Ninja" ..
      - name: Build ns-3
        run: |
          cd cmake-cache
          ninja
      - name: Print ccache statistics
        id: ccache_results
        run: |
          ccache -s
          python -c "import re; print('::set-output name=cache_hit_rate::'+re.findall('.* (.*) %', '`ccache -s | grep "cache hit rate"`')[0])"
      - name: Run tests and examples
        if: steps.ccache_results.outputs.cache_hit_rate != '100.00'    
        run: python test.py --nowaf

  Mac_OS_X:

    runs-on: macos-latest
    outputs:
        cache_hit_rate: ${{ steps.ccache_results.outputs.ccache_hit_rate }}
    steps:
      - uses: actions/checkout@v1
      - name: Install required packages
        run: |
          brew install ninja cmake gcc@9 ccache libxml2 gsl open-mpi #qt5
      - name: Get timestamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD-HH-mm-ss'
      - name: Restore ccache
        id: ccache
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: osx_brew-ci-${{steps.time.outputs.time}}
          restore-keys: osx_brew-ci-
      - name: Setup ccache
        run: |
          export PATH=/usr/local/bin:$PATH #:/usr/local/opt/qt/bin
          ccache --set-config=cache_dir="$GITHUB_WORKSPACE/.ccache"
          ccache --set-config=max_size=400M
          ccache --set-config=compression=true
          ccache -z
      - name: Configure CMake
        run: |
          export PATH=/usr/local/bin:$PATH #:/usr/local/opt/qt/bin
          export CXX=g++-9
          export CC=gcc-9
          mkdir cmake-cache
          cd cmake-cache
          cmake -DCMAKE_BUILD_TYPE=minsizerel -DNS3_EXAMPLES=ON -DNS3_TESTS=ON -G"Ninja" ..
      - name: Build ns-3
        run: |
          export PATH="$PATH" #:/usr/local/opt/qt/bin
          cd cmake-cache
          ninja        
      - name: Print ccache statistics
        id: ccache_results
        run: |
          ccache -s
          python3 -c "import re; print('::set-output name=cache_hit_rate::'+re.findall('.* (.*) %', '`ccache -s | grep "cache hit rate"`')[0])"
      - name: Run tests and examples
        if: steps.ccache_results.outputs.cache_hit_rate != '100.00'    
        run: python3 test.py --nowaf
    #  - name: Clean release with debug artifacts
    #    run: |
    #      rm -Rf ../build
    #      rm -Rf ./*
    #      rm -Rf ../3rd-party/vcpkg
    #      rm ../utils/failed-tests.json

  #Windows_Visual_Studio:   #not working
  #
  #  runs-on: windows-latest
  #
  #  steps:
  #  - uses: actions/checkout@v1
  #  - name: Install required packages
  #    run: |
  #      ????
  #  - name: Configure CMake
  #    run: |
  #      %comspec% /k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat"
  #      mkdir cmake-cache
  #      cd cmake-cache
  #      cmake -DCMAKE_BUILD_TYPE=RELEASE -G"Ninja" ..
  #  - name: Build ns-3
  #    run: |
  #      %comspec% /k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat"
  #      cd cmake-cache
  #      ninja
  #  -  name: Run tests
  #     run: |
  #       python3 ./utils/test-runner-script.py


