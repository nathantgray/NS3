name: "CodeCov"

on: 
  schedule:
  - cron:  '0 8 * * 1'  # every Monday at 8AM
jobs:
  Ubuntu-coverage:
    runs-on: ubuntu-latest
    outputs:
        cache_hit_rate: ${{ steps.ccache_results.outputs.ccache_hit_rate }}
    steps:
      - uses: actions/checkout@v1
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get -y install apt-utils
          sudo apt-get -y install git gcc g++ cmake python3 make ninja-build
          #sudo apt-get -y install qt5-default
          #sudo apt-get -y install gdb valgrind
          sudo apt-get -y install tcpdump
          sudo apt-get -y install curl unzip tar
          sudo apt-get -y install ccache
          sudo apt-get -y install lcov
      - name: Get timestamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD-HH-mm-ss'
      - name: Restore ccache
        id: ccache
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ubuntu-coverage-${{steps.time.outputs.time}}
          restore-keys: ubuntu-coverage-
      - name: Setup ccache
        run: |
          ccache --set-config=cache_dir="$GITHUB_WORKSPACE/.ccache"
          ccache --set-config=max_size=400M
          ccache --set-config=compression=true
          ccache -z
      - name: Configure CMake
        run: |
          mkdir cmake-cache
          cd cmake-cache
          cmake -DCMAKE_BUILD_TYPE=relwithdebinfo -DNS3_EXAMPLES=ON -DNS3_TESTS=ON -DNS3_COVERAGE=ON -G"Ninja"  ..
      - name: Build ns-3
        run: |
          cd cmake-cache
          ninja
      - name: Print ccache statistics
        id: ccache_results
        run: |
          ccache -s
          python3 -c "import re; print('::set-output name=cache_hit_rate::'+re.findall('.* (.*) %', '`ccache -s | grep "cache hit rate"`')[0])"
      - name: Generate coverage data and submit to codecov.io
        if: steps.ccache_results.outputs.cache_hit_rate != '100.00'
        run: |
          cd cmake-cache
          ninja coverage_gcc
          cd ../build/coverage
          bash <(curl -s https://codecov.io/bash) -f ns3.info || echo "Codecov did not collect coverage reports"
